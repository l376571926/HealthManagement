package group.tonight.healthmanagement.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import group.tonight.healthmanagement.model.HealthDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEALTH_DATA_BEAN".
*/
public class HealthDataBeanDao extends AbstractDao<HealthDataBean, Long> {

    public static final String TABLENAME = "HEALTH_DATA_BEAN";

    /**
     * Properties of entity HealthDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, Long.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(2, String.class, "typeName", false, "TYPE_NAME");
        public final static Property BaseData = new Property(3, boolean.class, "baseData", false, "BASE_DATA");
        public final static Property Uid = new Property(4, Long.class, "uid", false, "UID");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property Height = new Property(6, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(7, int.class, "weight", false, "WEIGHT");
        public final static Property Vision = new Property(8, double.class, "vision", false, "VISION");
        public final static Property Hearing = new Property(9, String.class, "hearing", false, "HEARING");
        public final static Property Bone = new Property(10, String.class, "bone", false, "BONE");
        public final static Property Kidney = new Property(11, String.class, "kidney", false, "KIDNEY");
        public final static Property Limb = new Property(12, String.class, "limb", false, "LIMB");
        public final static Property Blood = new Property(13, String.class, "blood", false, "BLOOD");
        public final static Property TypeValue = new Property(14, String.class, "typeValue", false, "TYPE_VALUE");
        public final static Property Hint = new Property(15, String.class, "hint", false, "HINT");
    }

    private Query<HealthDataBean> userBean_HealthDataBeansQuery;

    public HealthDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HealthDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEALTH_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_ID\" INTEGER," + // 1: typeId
                "\"TYPE_NAME\" TEXT," + // 2: typeName
                "\"BASE_DATA\" INTEGER NOT NULL ," + // 3: baseData
                "\"UID\" INTEGER," + // 4: uid
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"HEIGHT\" INTEGER NOT NULL ," + // 6: height
                "\"WEIGHT\" INTEGER NOT NULL ," + // 7: weight
                "\"VISION\" REAL NOT NULL ," + // 8: vision
                "\"HEARING\" TEXT," + // 9: hearing
                "\"BONE\" TEXT," + // 10: bone
                "\"KIDNEY\" TEXT," + // 11: kidney
                "\"LIMB\" TEXT," + // 12: limb
                "\"BLOOD\" TEXT," + // 13: blood
                "\"TYPE_VALUE\" TEXT," + // 14: typeValue
                "\"HINT\" TEXT);"); // 15: hint
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEALTH_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HealthDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(2, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(3, typeName);
        }
        stmt.bindLong(4, entity.getBaseData() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(5, uid);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
        stmt.bindLong(7, entity.getHeight());
        stmt.bindLong(8, entity.getWeight());
        stmt.bindDouble(9, entity.getVision());
 
        String hearing = entity.getHearing();
        if (hearing != null) {
            stmt.bindString(10, hearing);
        }
 
        String bone = entity.getBone();
        if (bone != null) {
            stmt.bindString(11, bone);
        }
 
        String kidney = entity.getKidney();
        if (kidney != null) {
            stmt.bindString(12, kidney);
        }
 
        String limb = entity.getLimb();
        if (limb != null) {
            stmt.bindString(13, limb);
        }
 
        String blood = entity.getBlood();
        if (blood != null) {
            stmt.bindString(14, blood);
        }
 
        String typeValue = entity.getTypeValue();
        if (typeValue != null) {
            stmt.bindString(15, typeValue);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(16, hint);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HealthDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(2, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(3, typeName);
        }
        stmt.bindLong(4, entity.getBaseData() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(5, uid);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
        stmt.bindLong(7, entity.getHeight());
        stmt.bindLong(8, entity.getWeight());
        stmt.bindDouble(9, entity.getVision());
 
        String hearing = entity.getHearing();
        if (hearing != null) {
            stmt.bindString(10, hearing);
        }
 
        String bone = entity.getBone();
        if (bone != null) {
            stmt.bindString(11, bone);
        }
 
        String kidney = entity.getKidney();
        if (kidney != null) {
            stmt.bindString(12, kidney);
        }
 
        String limb = entity.getLimb();
        if (limb != null) {
            stmt.bindString(13, limb);
        }
 
        String blood = entity.getBlood();
        if (blood != null) {
            stmt.bindString(14, blood);
        }
 
        String typeValue = entity.getTypeValue();
        if (typeValue != null) {
            stmt.bindString(15, typeValue);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(16, hint);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HealthDataBean readEntity(Cursor cursor, int offset) {
        HealthDataBean entity = new HealthDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // typeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeName
            cursor.getShort(offset + 3) != 0, // baseData
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // uid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.getInt(offset + 6), // height
            cursor.getInt(offset + 7), // weight
            cursor.getDouble(offset + 8), // vision
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hearing
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // bone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // kidney
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // limb
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // blood
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // typeValue
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // hint
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HealthDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBaseData(cursor.getShort(offset + 3) != 0);
        entity.setUid(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeight(cursor.getInt(offset + 6));
        entity.setWeight(cursor.getInt(offset + 7));
        entity.setVision(cursor.getDouble(offset + 8));
        entity.setHearing(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setKidney(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLimb(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBlood(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTypeValue(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHint(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HealthDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HealthDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HealthDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "healthDataBeans" to-many relationship of UserBean. */
    public List<HealthDataBean> _queryUserBean_HealthDataBeans(Long uid) {
        synchronized (this) {
            if (userBean_HealthDataBeansQuery == null) {
                QueryBuilder<HealthDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                userBean_HealthDataBeansQuery = queryBuilder.build();
            }
        }
        Query<HealthDataBean> query = userBean_HealthDataBeansQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
