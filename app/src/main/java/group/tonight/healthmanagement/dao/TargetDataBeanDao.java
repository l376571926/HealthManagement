package group.tonight.healthmanagement.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import group.tonight.healthmanagement.model.TargetDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TARGET_DATA_BEAN".
*/
public class TargetDataBeanDao extends AbstractDao<TargetDataBean, Long> {

    public static final String TABLENAME = "TARGET_DATA_BEAN";

    /**
     * Properties of entity TargetDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Target = new Property(2, int.class, "target", false, "TARGET");
        public final static Property Real = new Property(3, int.class, "real", false, "REAL");
        public final static Property Complete = new Property(4, boolean.class, "complete", false, "COMPLETE");
        public final static Property Uid = new Property(5, Long.class, "uid", false, "UID");
    }

    private Query<TargetDataBean> userBean_TargetDataBeansQuery;

    public TargetDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TargetDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TARGET_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"TARGET\" INTEGER NOT NULL ," + // 2: target
                "\"REAL\" INTEGER NOT NULL ," + // 3: real
                "\"COMPLETE\" INTEGER NOT NULL ," + // 4: complete
                "\"UID\" INTEGER);"); // 5: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TARGET_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TargetDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getTarget());
        stmt.bindLong(4, entity.getReal());
        stmt.bindLong(5, entity.getComplete() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(6, uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TargetDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
        stmt.bindLong(3, entity.getTarget());
        stmt.bindLong(4, entity.getReal());
        stmt.bindLong(5, entity.getComplete() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(6, uid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TargetDataBean readEntity(Cursor cursor, int offset) {
        TargetDataBean entity = new TargetDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.getInt(offset + 2), // target
            cursor.getInt(offset + 3), // real
            cursor.getShort(offset + 4) != 0, // complete
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TargetDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTarget(cursor.getInt(offset + 2));
        entity.setReal(cursor.getInt(offset + 3));
        entity.setComplete(cursor.getShort(offset + 4) != 0);
        entity.setUid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TargetDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TargetDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TargetDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "targetDataBeans" to-many relationship of UserBean. */
    public List<TargetDataBean> _queryUserBean_TargetDataBeans(Long uid) {
        synchronized (this) {
            if (userBean_TargetDataBeansQuery == null) {
                QueryBuilder<TargetDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                userBean_TargetDataBeansQuery = queryBuilder.build();
            }
        }
        Query<TargetDataBean> query = userBean_TargetDataBeansQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
