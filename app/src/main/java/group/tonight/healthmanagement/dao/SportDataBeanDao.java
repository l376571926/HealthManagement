package group.tonight.healthmanagement.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import group.tonight.healthmanagement.model.SportDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_DATA_BEAN".
*/
public class SportDataBeanDao extends AbstractDao<SportDataBean, Long> {

    public static final String TABLENAME = "SPORT_DATA_BEAN";

    /**
     * Properties of entity SportDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeId = new Property(1, Long.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(2, String.class, "typeName", false, "TYPE_NAME");
        public final static Property BaseData = new Property(3, boolean.class, "baseData", false, "BASE_DATA");
        public final static Property Uid = new Property(4, Long.class, "uid", false, "UID");
        public final static Property CreateDate = new Property(5, String.class, "createDate", false, "CREATE_DATE");
        public final static Property StartTime = new Property(6, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, String.class, "endTime", false, "END_TIME");
        public final static Property Mileage = new Property(8, String.class, "mileage", false, "MILEAGE");
        public final static Property AverageSpeed = new Property(9, String.class, "averageSpeed", false, "AVERAGE_SPEED");
        public final static Property HasMileage = new Property(10, boolean.class, "hasMileage", false, "HAS_MILEAGE");
    }

    private Query<SportDataBean> userBean_SportDataBeansQuery;

    public SportDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SportDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_ID\" INTEGER," + // 1: typeId
                "\"TYPE_NAME\" TEXT," + // 2: typeName
                "\"BASE_DATA\" INTEGER NOT NULL ," + // 3: baseData
                "\"UID\" INTEGER," + // 4: uid
                "\"CREATE_DATE\" TEXT," + // 5: createDate
                "\"START_TIME\" TEXT," + // 6: startTime
                "\"END_TIME\" TEXT," + // 7: endTime
                "\"MILEAGE\" TEXT," + // 8: mileage
                "\"AVERAGE_SPEED\" TEXT," + // 9: averageSpeed
                "\"HAS_MILEAGE\" INTEGER NOT NULL );"); // 10: hasMileage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(2, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(3, typeName);
        }
        stmt.bindLong(4, entity.getBaseData() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(5, uid);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(9, mileage);
        }
 
        String averageSpeed = entity.getAverageSpeed();
        if (averageSpeed != null) {
            stmt.bindString(10, averageSpeed);
        }
        stmt.bindLong(11, entity.getHasMileage() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(2, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(3, typeName);
        }
        stmt.bindLong(4, entity.getBaseData() ? 1L: 0L);
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(5, uid);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(6, createDate);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(7, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(8, endTime);
        }
 
        String mileage = entity.getMileage();
        if (mileage != null) {
            stmt.bindString(9, mileage);
        }
 
        String averageSpeed = entity.getAverageSpeed();
        if (averageSpeed != null) {
            stmt.bindString(10, averageSpeed);
        }
        stmt.bindLong(11, entity.getHasMileage() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SportDataBean readEntity(Cursor cursor, int offset) {
        SportDataBean entity = new SportDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // typeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // typeName
            cursor.getShort(offset + 3) != 0, // baseData
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // uid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mileage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // averageSpeed
            cursor.getShort(offset + 10) != 0 // hasMileage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBaseData(cursor.getShort(offset + 3) != 0);
        entity.setUid(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCreateDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMileage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAverageSpeed(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHasMileage(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SportDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SportDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SportDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sportDataBeans" to-many relationship of UserBean. */
    public List<SportDataBean> _queryUserBean_SportDataBeans(Long uid) {
        synchronized (this) {
            if (userBean_SportDataBeansQuery == null) {
                QueryBuilder<SportDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                userBean_SportDataBeansQuery = queryBuilder.build();
            }
        }
        Query<SportDataBean> query = userBean_SportDataBeansQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
