package group.tonight.healthmanagement.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import java.util.List;

import group.tonight.healthmanagement.model.StepDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STEP_DATA_BEAN".
*/
public class StepDataBeanDao extends AbstractDao<StepDataBean, Long> {

    public static final String TABLENAME = "STEP_DATA_BEAN";

    /**
     * Properties of entity StepDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Steps = new Property(1, long.class, "steps", false, "STEPS");
        public final static Property ActiveSeconds = new Property(2, long.class, "activeSeconds", false, "ACTIVE_SECONDS");
        public final static Property Calories = new Property(3, double.class, "calories", false, "CALORIES");
        public final static Property CreateDate = new Property(4, String.class, "createDate", false, "CREATE_DATE");
        public final static Property CreateTime = new Property(5, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Uid = new Property(6, Long.class, "uid", false, "UID");
    }

    private Query<StepDataBean> userBean_StepDataBeansQuery;

    public StepDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StepDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STEP_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STEPS\" INTEGER NOT NULL ," + // 1: steps
                "\"ACTIVE_SECONDS\" INTEGER NOT NULL ," + // 2: activeSeconds
                "\"CALORIES\" REAL NOT NULL ," + // 3: calories
                "\"CREATE_DATE\" TEXT," + // 4: createDate
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 5: createTime
                "\"UID\" INTEGER);"); // 6: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STEP_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StepDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSteps());
        stmt.bindLong(3, entity.getActiveSeconds());
        stmt.bindDouble(4, entity.getCalories());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
        stmt.bindLong(6, entity.getCreateTime());
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(7, uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StepDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSteps());
        stmt.bindLong(3, entity.getActiveSeconds());
        stmt.bindDouble(4, entity.getCalories());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(5, createDate);
        }
        stmt.bindLong(6, entity.getCreateTime());
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(7, uid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StepDataBean readEntity(Cursor cursor, int offset) {
        StepDataBean entity = new StepDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // steps
            cursor.getLong(offset + 2), // activeSeconds
            cursor.getDouble(offset + 3), // calories
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createDate
            cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StepDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSteps(cursor.getLong(offset + 1));
        entity.setActiveSeconds(cursor.getLong(offset + 2));
        entity.setCalories(cursor.getDouble(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.getLong(offset + 5));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StepDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StepDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StepDataBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stepDataBeans" to-many relationship of UserBean. */
    public List<StepDataBean> _queryUserBean_StepDataBeans(Long uid) {
        synchronized (this) {
            if (userBean_StepDataBeansQuery == null) {
                QueryBuilder<StepDataBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                userBean_StepDataBeansQuery = queryBuilder.build();
            }
        }
        Query<StepDataBean> query = userBean_StepDataBeansQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
